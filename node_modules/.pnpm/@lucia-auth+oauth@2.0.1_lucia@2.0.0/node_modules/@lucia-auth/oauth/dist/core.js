export class OAuthRequestError extends Error {
    request;
    response;
    message = "OAUTH_REQUEST_FAILED";
    constructor(request, response) {
        super("OAUTH_REQUEST_FAILED");
        this.request = request;
        this.response = response;
    }
}
export const providerUserAuth = async (auth, providerId, providerUserId) => {
    const getExistingUser = async () => {
        try {
            const key = await auth.useKey(providerId, providerUserId, null);
            const user = await auth.getUser(key.userId);
            return user;
        }
        catch (e) {
            const error = e;
            if (error?.message !== "AUTH_INVALID_KEY_ID")
                throw e;
            return null;
        }
    };
    const existingUser = await getExistingUser();
    return {
        existingUser,
        createKey: async (userId) => {
            return await auth.createKey({
                userId,
                providerId: providerId,
                providerUserId,
                password: null
            });
        },
        createUser: async (options) => {
            const user = await auth.createUser({
                key: {
                    providerId: providerId,
                    providerUserId,
                    password: null
                },
                ...options
            });
            return user;
        }
    };
};
