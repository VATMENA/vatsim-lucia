import type { Auth, Key } from "lucia";
import type { CreateUserAttributesParameter, LuciaUser } from "./lucia.js";
export type OAuthConfig = {
    clientId: string;
    clientSecret: string;
    scope?: string[];
};
export type OAuthProvider = {
    validateCallback: (code: string, ...args: any[]) => Promise<{
        existingUser: Record<any, any> | null;
        createUser: (options: {
            userId?: string;
            attributes: Record<string, any>;
        }) => Promise<Record<any, any>>;
        createKey: (userId: string) => Promise<Key>;
    }>;
    getAuthorizationUrl: (redirectUri?: string) => Promise<readonly [URL, ...any[]]>;
};
export declare class OAuthRequestError extends Error {
    request: Request;
    response: Response;
    message: "OAUTH_REQUEST_FAILED";
    constructor(request: Request, response: Response);
}
export declare const providerUserAuth: <_Auth extends Auth<any>>(auth: _Auth, providerId: string, providerUserId: string) => Promise<{
    readonly existingUser: Awaited<LuciaUser<_Auth>> | null;
    readonly createKey: (userId: string) => Promise<Readonly<{
        userId: string;
        providerId: string;
        providerUserId: string;
        passwordDefined: boolean;
    }>>;
    readonly createUser: (options: {
        userId?: string | undefined;
        attributes: CreateUserAttributesParameter<_Auth>;
    }) => Promise<LuciaUser<_Auth>>;
}>;
