import type { Auth } from "lucia";
import type { OAuthConfig } from "../core.js";
type Config = OAuthConfig & {
    redirectUri: string;
    showDialog: boolean;
};
export declare const spotify: <_Auth extends Auth<any>>(auth: _Auth, config: Config) => {
    readonly getAuthorizationUrl: () => Promise<readonly [URL, string]>;
    readonly validateCallback: (code: string) => Promise<{
        spotifyUser: SpotifyUser;
        spotifyTokens: {
            accessToken: string;
            tokenType: string;
            scope: string;
            accessTokenExpiresIn: number;
            refreshToken: string;
        };
        existingUser: Awaited<Awaited<ReturnType<_Auth["getUser"]>>> | null;
        createKey: (userId: string) => Promise<Readonly<{
            userId: string;
            providerId: string;
            providerUserId: string;
            passwordDefined: boolean;
        }>>;
        createUser: (options: {
            userId?: string | undefined;
            attributes: import("../lucia.js").CreateUserAttributesParameter<_Auth>;
        }) => Promise<Awaited<ReturnType<_Auth["getUser"]>>>;
    }>;
};
export type SpotifyUser = {
    country?: string;
    display_name: string | null;
    email?: string;
    explicit_content: {
        filter_enabled?: boolean;
        filter_locked?: boolean;
    };
    external_urls: {
        spotify: string;
    };
    followers: {
        href: string | null;
        total: number;
    };
    href: string;
    id: string;
    images: [
        {
            url: string;
            height: number | null;
            width: number | null;
        }
    ];
    product?: string;
    type: string;
    uri: string;
};
export {};
