import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "twitch";
export const twitch = (auth, config) => {
    const getTwitchTokens = async (code) => {
        const requestUrl = createUrl("https://id.twitch.tv/oauth2/token", {
            client_id: config.clientId,
            client_secret: config.clientSecret,
            code,
            grant_type: "authorization_code",
            redirect_uri: config.redirectUri
        });
        const request = new Request(requestUrl, {
            method: "POST"
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            refreshToken: tokens.refresh_token,
            accessTokenExpiresIn: tokens.expires_in
        };
    };
    const getTwitchUser = async (accessToken) => {
        // https://dev.twitch.tv/docs/api/reference/#get-users
        const request = new Request("https://api.twitch.tv/helix/users", {
            headers: {
                "Client-ID": config.clientId,
                ...authorizationHeaders("bearer", accessToken)
            }
        });
        const twitchUsersResponse = await handleRequest(request);
        return twitchUsersResponse.data[0];
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const forceVerify = config.forceVerify ?? false;
            const url = createUrl("https://id.twitch.tv/oauth2/authorize", {
                client_id: config.clientId,
                redirect_uri: config.redirectUri,
                scope: scope([], config.scope),
                response_type: "code",
                force_verify: forceVerify.toString(),
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const twitchTokens = await getTwitchTokens(code);
            const twitchUser = await getTwitchUser(twitchTokens.accessToken);
            const providerUserId = twitchUser.id;
            const twitchUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...twitchUserAuth,
                twitchUser,
                twitchTokens
            };
        }
    };
};
