import type { Auth } from "lucia";
import type { OAuthConfig } from "../core.js";
type Config = OAuthConfig & {
    appDomain: string;
    redirectUri: string;
    connection?: string;
    organization?: string;
    invitation?: string;
    loginHint?: string;
};
export declare const auth0: <_Auth extends Auth<any>>(auth: _Auth, config: Config) => {
    readonly getAuthorizationUrl: () => Promise<readonly [URL, string]>;
    readonly validateCallback: (code: string) => Promise<{
        auth0User: Auth0User;
        auth0Tokens: {
            accessToken: string;
            refreshToken: string;
            idToken: string;
            tokenType: string;
        };
        existingUser: Awaited<Awaited<ReturnType<_Auth["getUser"]>>> | null;
        createKey: (userId: string) => Promise<Readonly<{
            userId: string;
            providerId: string;
            providerUserId: string;
            passwordDefined: boolean;
        }>>;
        createUser: (options: {
            userId?: string | undefined;
            attributes: import("../lucia.js").CreateUserAttributesParameter<_Auth>;
        }) => Promise<Awaited<ReturnType<_Auth["getUser"]>>>;
    }>;
};
export type Auth0User = {
    id: string;
    nickname: string;
    name: string;
    picture: string;
    updated_at: string;
};
export {};
