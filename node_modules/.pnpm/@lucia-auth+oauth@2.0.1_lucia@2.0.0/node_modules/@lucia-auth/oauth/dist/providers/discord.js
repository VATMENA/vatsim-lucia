import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "discord";
export const discord = (auth, config) => {
    const getDiscordTokens = async (code) => {
        const request = new Request("https://discord.com/api/oauth2/token", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            body: new URLSearchParams({
                client_id: config.clientId,
                client_secret: config.clientSecret,
                grant_type: "authorization_code",
                redirect_uri: config.redirectUri,
                code
            }).toString()
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            refreshToken: tokens.refresh_token,
            accessTokenExpiresIn: tokens.expires_in
        };
    };
    const getDiscordUser = async (accessToken) => {
        // do not use oauth/users/@me because it ignores intents, use oauth/users/@me instead
        const request = new Request("https://discord.com/api/users/@me", {
            headers: authorizationHeaders("bearer", accessToken)
        });
        const discordUser = await handleRequest(request);
        return discordUser;
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://discord.com/oauth2/authorize", {
                response_type: "code",
                client_id: config.clientId,
                scope: scope(["identify"], config.scope),
                redirect_uri: config.redirectUri,
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const discordTokens = await getDiscordTokens(code);
            const discordUser = await getDiscordUser(discordTokens.accessToken);
            const providerUserId = discordUser.id;
            const discordUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...discordUserAuth,
                discordUser,
                discordTokens
            };
        }
    };
};
