import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "google";
export const google = (auth, config) => {
    const getGoogleTokens = async (code) => {
        const requestUrl = createUrl("https://oauth2.googleapis.com/token", {
            client_id: config.clientId,
            client_secret: config.clientSecret,
            code,
            grant_type: "authorization_code",
            redirect_uri: config.redirectUri
        });
        const request = new Request(requestUrl, {
            method: "POST"
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            refreshToken: tokens.refresh_token ?? null,
            accessTokenExpiresIn: tokens.expires_in
        };
    };
    const getGoogleUser = async (accessToken) => {
        const request = new Request("https://www.googleapis.com/oauth2/v3/userinfo", {
            headers: authorizationHeaders("bearer", accessToken)
        });
        const googleUser = await handleRequest(request);
        return googleUser;
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://accounts.google.com/o/oauth2/v2/auth", {
                client_id: config.clientId,
                redirect_uri: config.redirectUri,
                scope: scope(["https://www.googleapis.com/auth/userinfo.profile"], config.scope),
                response_type: "code",
                access_type: config.accessType ?? "online",
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const googleTokens = await getGoogleTokens(code);
            const googleUser = await getGoogleUser(googleTokens.accessToken);
            const providerUserId = googleUser.sub;
            const googleUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...googleUserAuth,
                googleUser,
                googleTokens
            };
        }
    };
};
