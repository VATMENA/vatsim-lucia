import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState, encodeBase64 } from "../utils.js";
const PROVIDER_ID = "reddit";
export const reddit = (auth, config) => {
    const getRedditTokens = async (code) => {
        const requestUrl = createUrl("https://www.reddit.com/api/v1/access_token", {
            grant_type: "authorization_code",
            redirect_uri: config.redirectUri,
            code
        });
        const request = new Request(requestUrl, {
            method: "POST",
            headers: authorizationHeaders("basic", encodeBase64(config.clientId + ":" + config.clientSecret))
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token
        };
    };
    const getRedditUser = async (accessToken) => {
        const request = new Request("https://oauth.reddit.com/api/v1/me", {
            headers: authorizationHeaders("bearer", accessToken)
        });
        const redditUser = await handleRequest(request);
        return redditUser;
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://www.reddit.com/api/v1/authorize", {
                client_id: config.clientId,
                response_type: "code",
                redirect_uri: config.redirectUri,
                duration: "permanent",
                scope: scope([], config.scope),
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const redditTokens = await getRedditTokens(code);
            const redditUser = await getRedditUser(redditTokens.accessToken);
            const providerUserId = redditUser.id;
            const redditUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...redditUserAuth,
                redditUser,
                redditTokens
            };
        }
    };
};
