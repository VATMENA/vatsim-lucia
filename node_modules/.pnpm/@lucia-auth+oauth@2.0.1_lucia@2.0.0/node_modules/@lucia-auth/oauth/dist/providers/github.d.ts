import type { Auth } from "lucia";
import type { OAuthConfig } from "../core.js";
type Tokens = {
    accessToken: string;
    accessTokenExpiresIn: null;
} | {
    accessToken: string;
    accessTokenExpiresIn: number;
    refreshToken: string;
    refreshTokenExpiresIn: number;
};
type Config = OAuthConfig & {
    redirectUri?: string;
};
export declare const github: <_Auth extends Auth<any>>(auth: _Auth, config: Config) => {
    readonly getAuthorizationUrl: () => Promise<readonly [URL, string]>;
    readonly validateCallback: (code: string) => Promise<{
        githubUser: GithubUser;
        githubTokens: Tokens;
        existingUser: Awaited<Awaited<ReturnType<_Auth["getUser"]>>> | null;
        createKey: (userId: string) => Promise<Readonly<{
            userId: string;
            providerId: string;
            providerUserId: string;
            passwordDefined: boolean;
        }>>;
        createUser: (options: {
            userId?: string | undefined;
            attributes: import("../lucia.js").CreateUserAttributesParameter<_Auth>;
        }) => Promise<Awaited<ReturnType<_Auth["getUser"]>>>;
    }>;
};
type PublicGithubUser = {
    avatar_url: string;
    bio: string | null;
    blog: string | null;
    company: string | null;
    created_at: string;
    email: string | null;
    events_url: string;
    followers: number;
    followers_url: string;
    following: number;
    following_url: string;
    gists_url: string;
    gravatar_id: string | null;
    hireable: boolean | null;
    html_url: string;
    id: number;
    location: string | null;
    login: string;
    name: string | null;
    node_id: string;
    organizations_url: string;
    public_gists: number;
    public_repos: number;
    received_events_url: string;
    repos_url: string;
    site_admin: boolean;
    starred_url: string;
    subscriptions_url: string;
    type: string;
    updated_at: string;
    url: string;
    twitter_username?: string | null;
    plan?: {
        name: string;
        space: number;
        private_repos: number;
        collaborators: number;
    };
    suspended_at?: string | null;
};
type PrivateGithubUser = PublicGithubUser & {
    collaborators: number;
    disk_usage: number;
    owned_private_repos: number;
    private_gists: number;
    total_private_repos: number;
    two_factor_authentication: boolean;
    business_plus?: boolean;
    ldap_dn?: string;
};
export type GithubUser = PublicGithubUser | PrivateGithubUser;
export {};
