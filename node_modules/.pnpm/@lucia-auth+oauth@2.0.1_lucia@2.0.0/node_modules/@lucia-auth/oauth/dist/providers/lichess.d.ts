import type { Auth } from "lucia";
import type { OAuthConfig } from "../core.js";
type Config = OAuthConfig & {
    redirectUri: string;
};
export declare const lichess: <_Auth extends Auth<any>>(auth: _Auth, config: Config) => {
    readonly getAuthorizationUrl: () => Promise<readonly [URL, string, string]>;
    readonly validateCallback: (code: string, code_verifier: string) => Promise<{
        lichessUser: LichessUser;
        lichessTokens: {
            accessToken: string;
            accessTokenExpiresIn: number;
        };
        existingUser: Awaited<Awaited<ReturnType<_Auth["getUser"]>>> | null;
        createKey: (userId: string) => Promise<Readonly<{
            userId: string;
            providerId: string;
            providerUserId: string;
            passwordDefined: boolean;
        }>>;
        createUser: (options: {
            userId?: string | undefined;
            attributes: import("../lucia.js").CreateUserAttributesParameter<_Auth>;
        }) => Promise<Awaited<ReturnType<_Auth["getUser"]>>>;
    }>;
};
export type LichessUser = {
    id: string;
    username: string;
};
export {};
