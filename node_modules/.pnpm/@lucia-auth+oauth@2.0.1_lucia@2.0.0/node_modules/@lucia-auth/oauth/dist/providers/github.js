import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "github";
export const github = (auth, config) => {
    const getGithubTokens = async (code) => {
        const requestUrl = createUrl("https://github.com/login/oauth/access_token", {
            client_id: config.clientId,
            client_secret: config.clientSecret,
            code
        });
        const request = new Request(requestUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            }
        });
        const tokens = await handleRequest(request);
        if ("expires_in" in tokens) {
            return {
                accessToken: tokens.access_token,
                refreshToken: tokens.refresh_token,
                accessTokenExpiresIn: tokens.expires_in,
                refreshTokenExpiresIn: tokens.refresh_token_expires_in
            };
        }
        return {
            accessToken: tokens.access_token,
            accessTokenExpiresIn: null
        };
    };
    const getGithubUser = async (accessToken) => {
        const request = new Request("https://api.github.com/user", {
            headers: authorizationHeaders("bearer", accessToken)
        });
        const githubUser = await handleRequest(request);
        return githubUser;
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://github.com/login/oauth/authorize", {
                client_id: config.clientId,
                scope: scope([], config.scope),
                state
            });
            if (config.redirectUri) {
                url.searchParams.set("redirect_uri", config.redirectUri);
            }
            return [url, state];
        },
        validateCallback: async (code) => {
            const githubTokens = await getGithubTokens(code);
            const githubUser = await getGithubUser(githubTokens.accessToken);
            const providerUserId = githubUser.id.toString();
            const githubUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...githubUserAuth,
                githubUser,
                githubTokens
            };
        }
    };
};
