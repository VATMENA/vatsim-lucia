import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "linkedin";
export const linkedin = (auth, config) => {
    const getLinkedinTokens = async (code) => {
        const requestUrl = createUrl("https://www.linkedin.com/oauth/v2/accessToken", {
            grant_type: "authorization_code",
            client_id: config.clientId,
            client_secret: config.clientSecret,
            redirect_uri: config.redirectUri,
            code
        });
        const request = new Request(requestUrl, {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            }
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            accessTokenExpiresIn: tokens.expires_in,
            refreshToken: tokens.refresh_token,
            refreshTokenExpiresIn: tokens.refresh_token_expires_in,
            scope: tokens.scope
        };
    };
    const getLinkedinUser = async (accessToken) => {
        const linkedinUserProfile = await getProfile(accessToken);
        const displayImageElement = linkedinUserProfile.profilePicture["displayImage~"]?.elements
            ?.slice(-1)
            ?.pop();
        const linkedinUser = {
            id: linkedinUserProfile.id,
            firstName: linkedinUserProfile.localizedFirstName,
            lastName: linkedinUserProfile.localizedLastName,
            profilePicture: displayImageElement?.identifiers?.pop()?.identifier
        };
        return linkedinUser;
    };
    const getProfile = async (accessToken) => {
        const requestUrl = createUrl("https://api.linkedin.com/v2/me", {
            projection: "(id,localizedFirstName,localizedLastName,profilePicture(displayImage~:playableStreams))"
        });
        const request = new Request(requestUrl, {
            headers: authorizationHeaders("bearer", accessToken)
        });
        return handleRequest(request);
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://www.linkedin.com/oauth/v2/authorization", {
                client_id: config.clientId,
                response_type: "code",
                redirect_uri: config.redirectUri,
                scope: scope(["r_liteprofile"], config.scope),
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const linkedinTokens = await getLinkedinTokens(code);
            const linkedinUser = await getLinkedinUser(linkedinTokens.accessToken);
            const providerUserId = linkedinUser.id;
            const linkedinUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...linkedinUserAuth,
                linkedinUser,
                linkedinTokens
            };
        }
    };
};
