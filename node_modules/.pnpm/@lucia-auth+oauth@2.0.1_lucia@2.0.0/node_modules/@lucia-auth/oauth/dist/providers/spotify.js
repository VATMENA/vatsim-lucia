import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState, encodeBase64 } from "../utils.js";
const PROVIDER_ID = "spotify";
export const spotify = (auth, config) => {
    const getSpotifyTokens = async (code) => {
        const request = new Request("https://accounts.spotify.com/api/token", {
            method: "POST",
            body: new URLSearchParams({
                code,
                grant_type: "authorization_code",
                redirect_uri: config.redirectUri
            }).toString(),
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
                ...authorizationHeaders("basic", encodeBase64(`${config.clientId}:${config.clientSecret}`))
            }
        });
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            tokenType: tokens.token_type,
            scope: tokens.scope,
            accessTokenExpiresIn: tokens.expires_in,
            refreshToken: tokens.refresh_token
        };
    };
    const getSpotifyUser = async (accessToken) => {
        // https://developer.spotify.com/documentation/web-api/reference/get-current-users-profile
        const request = new Request("https://api.spotify.com/v1/me", {
            headers: {
                ...authorizationHeaders("bearer", accessToken)
            }
        });
        return handleRequest(request);
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://accounts.spotify.com/authorize", {
                client_id: config.clientId,
                response_type: "code",
                redirect_uri: config.redirectUri,
                scope: scope([], config.scope),
                state,
                show_dialog: config.showDialog.toString()
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const spotifyTokens = await getSpotifyTokens(code);
            const spotifyUser = await getSpotifyUser(spotifyTokens.accessToken);
            const providerUserId = spotifyUser.id;
            const spotifyUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...spotifyUserAuth,
                spotifyUser,
                spotifyTokens
            };
        }
    };
};
