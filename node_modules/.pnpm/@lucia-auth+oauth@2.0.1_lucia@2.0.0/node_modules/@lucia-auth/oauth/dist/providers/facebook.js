import { createUrl, handleRequest, authorizationHeaders } from "../request.js";
import { providerUserAuth } from "../core.js";
import { scope, generateState } from "../utils.js";
const PROVIDER_ID = "facebook";
export const facebook = (auth, config) => {
    const getFacebookTokens = async (code) => {
        const requestUrl = createUrl("https://graph.facebook.com/v16.0/oauth/access_token", {
            client_id: config.clientId,
            client_secret: config.clientSecret,
            redirect_uri: config.redirectUri,
            code
        });
        const request = new Request(requestUrl);
        const tokens = await handleRequest(request);
        return {
            accessToken: tokens.access_token,
            refreshToken: tokens.refresh_token,
            accessTokenExpiresIn: tokens.expires_in
        };
    };
    const getFacebookUser = async (accessToken) => {
        const requestUrl = createUrl("https://graph.facebook.com/me", {
            access_token: accessToken,
            fields: ["id", "name", "picture"].join(",")
        });
        const request = new Request(requestUrl, {
            headers: authorizationHeaders("bearer", accessToken)
        });
        const facebookUser = await handleRequest(request);
        return facebookUser;
    };
    return {
        getAuthorizationUrl: async () => {
            const state = generateState();
            const url = createUrl("https://www.facebook.com/v16.0/dialog/oauth", {
                client_id: config.clientId,
                scope: scope([], config.scope),
                redirect_uri: config.redirectUri,
                state
            });
            return [url, state];
        },
        validateCallback: async (code) => {
            const tokens = await getFacebookTokens(code);
            const facebookUser = await getFacebookUser(tokens.accessToken);
            const providerUserId = facebookUser.id;
            const facebookUserAuth = await providerUserAuth(auth, PROVIDER_ID, providerUserId);
            return {
                ...facebookUserAuth,
                facebookUser,
                tokens
            };
        }
    };
};
